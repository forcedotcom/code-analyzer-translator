[
  {
    "name": "AbstractClassWithoutAbstractMethod",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated directly) a protected constructor can be provided to prevent direct instantiation.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#abstractclasswithoutabstractmethod"
    ]
  },
  {
    "name": "AbstractClassWithoutAnyMethod",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "If an abstract class does not provide any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#abstractclasswithoutanymethod"
    ]
  },
  {
    "name": "AccessorClassGeneration",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Instantiation by way of private constructors from outside the constructor's class often causes the generation of an accessor. A factory method, or non-privatization of the constructor can eliminate this situation. The generated class file is actually an interface. It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#accessorclassgeneration",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#accessorclassgeneration"
    ]
  },
  {
    "name": "AccessorMethodGeneration",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "When accessing private fields / methods from another class, the Java compiler will generate accessor methods with package-private visibility. This adds overhead, and to the dex method count on Android. This situation can be avoided by changing the visibility of the field / method from private to package-private. _Note:_ This rule is only executed for Java 10 or lower. Since Java 11,... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#accessormethodgeneration",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#accessormethodgeneration"
    ]
  },
  {
    "name": "AddEmptyString",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific `toString()` methods instead or `String.valueOf()`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#addemptystring"
    ]
  },
  {
    "name": "ApexAssertionsShouldIncludeMessage",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "The second parameter of System.assert/third parameter of System.assertEquals/System.assertNotEquals is a message. Having a second/third parameter provides more information and makes it easier to debug the test failure and improves the readability of test output.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#apexassertionsshouldincludemessage"
    ]
  },
  {
    "name": "ApexBadCrypto",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "The rule makes sure you are using randomly generated IVs and keys for `Crypto` calls. Hard-wiring these values greatly compromises the security of encrypted data.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexbadcrypto"
    ]
  },
  {
    "name": "ApexCRUDViolation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "The rule validates you are checking for access permissions before a SOQL/SOSL/DML operation. Since Apex runs by default in system mode not having proper permissions checks results in escalation of privilege and may produce runtime errors. This check forces you to handle such scenarios. Since Winter '23 (API Version 56) you can enforce user mode for database operations by using `WITH USER_MODE`... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexcrudviolation",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexcrudviolation"
    ]
  },
  {
    "name": "ApexCSRF",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Having DML operations in Apex class constructor or initializers can have unexpected side effects: By just accessing a page, the DML statements would be executed and the database would be modified. Just querying the database is permitted. In addition to constructors and initializers, any method called `init` is checked as well. Salesforce Apex already protects against this scenario and raises a runtime... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#apexcsrf",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#apexcsrf"
    ]
  },
  {
    "name": "ApexDangerousMethods",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "Checks against calling dangerous methods. For the time being, it reports: * Against `FinancialForce`'s `Configuration.disableTriggerCRUDSecurity()`. Disabling CRUD security opens the door to several attacks and requires manual validation, which is unreliable. * Calling `System.debug` passing sensitive data as parameter, which could lead to exposure of private data.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexdangerousmethods"
    ]
  },
  {
    "name": "ApexDoc",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Documentation",
      "apexLanguage"
    ],
    "description": "This rule validates that: * ApexDoc comments are present for classes, methods, and properties that are public or global, excluding overrides and test classes (as well as the contents of test classes). * ApexDoc comments are present for classes, methods, and properties that are protected or private, depending on the properties `reportPrivate` and `reportProtected`. * ApexDoc comments should contain... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_documentation.html#apexdoc",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_documentation.html#apexdoc"
    ]
  },
  {
    "name": "ApexInsecureEndpoint",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "Checks against accessing endpoints under plain **http**. You should always use **https** for security.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexinsecureendpoint"
    ]
  },
  {
    "name": "ApexOpenRedirect",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "Checks against redirects to user-controlled locations. This prevents attackers from redirecting users to phishing sites.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexopenredirect"
    ]
  },
  {
    "name": "ApexSharingViolations",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "Detect classes declared without explicit sharing mode if DML methods are used. This forces the developer to take access restrictions into account before modifying objects.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexsharingviolations"
    ]
  },
  {
    "name": "ApexSOQLInjection",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "Detects the usage of untrusted / unescaped variables in DML queries.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexsoqlinjection"
    ]
  },
  {
    "name": "ApexSuggestUsingNamedCred",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "Detects hardcoded credentials used in requests to an endpoint. You should refrain from hardcoding credentials: * They are hard to mantain by being mixed in application code * Particularly hard to update them when used from different classes * Granting a developer access to the codebase means granting knowledge of credentials, keeping a two-level access is not possible. * Using different... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexsuggestusingnamedcred",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexsuggestusingnamedcred"
    ]
  },
  {
    "name": "ApexUnitTestClassShouldHaveAsserts",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "Apex unit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does. Custom assert method invocation patterns can be specified using the 'additionalAssertMethodPattern' property if required.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#apexunittestclassshouldhaveasserts"
    ]
  },
  {
    "name": "ApexUnitTestClassShouldHaveRunAs",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "Apex unit tests should include at least one runAs method. This makes the tests more robust, and independent from the user running it.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#apexunittestclassshouldhaverunas"
    ]
  },
  {
    "name": "ApexUnitTestMethodShouldHaveIsTestAnnotation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "Apex test methods should have `@isTest` annotation instead of the `testMethod` keyword, as `testMethod` is deprecated. Salesforce advices to use @isTest annotation for test classes and methods.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#apexunittestmethodshouldhaveistestannotation"
    ]
  },
  {
    "name": "ApexUnitTestShouldNotUseSeeAllDataTrue",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "Apex unit tests should not use @isTest(seeAllData=true) because it opens up the existing database data for unexpected modification by tests.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#apexunittestshouldnotuseseealldatatrue"
    ]
  },
  {
    "name": "ApexXSSFromEscapeFalse",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "Reports on calls to `addError` with disabled escaping. The message passed to `addError` will be displayed directly to the user in the UI, making it prime ground for XSS attacks if unescaped.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexxssfromescapefalse"
    ]
  },
  {
    "name": "ApexXSSFromURLParam",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "apexLanguage"
    ],
    "description": "Makes sure that all values obtained from URL parameters are properly escaped / sanitized to avoid XSS attacks.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_security.html#apexxssfromurlparam"
    ]
  },
  {
    "name": "AppendCharacterWithChar",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Avoid concatenating characters as strings in StringBuffer/StringBuilder.append methods.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#appendcharacterwithchar"
    ]
  },
  {
    "name": "ArrayIsStoredDirectly",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Constructors and methods receiving arrays should clone objects and store the copy. This prevents future changes from the user from affecting the original array.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#arrayisstoreddirectly"
    ]
  },
  {
    "name": "AssignmentInOperand-ecmascript",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "Avoid assignments in operands; this can make code more complicated and harder to read. This is sometime indicative of the bug where the assignment operator '=' was used instead of the equality operator '=='.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#assignmentinoperand"
    ]
  },
  {
    "name": "AssignmentInOperand-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Avoid assignments in operands; this can make code more complicated and harder to read.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#assignmentinoperand"
    ]
  },
  {
    "name": "AssignmentToNonFinalStatic",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Identifies a possible unsafe usage of a static field.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#assignmenttononfinalstatic"
    ]
  },
  {
    "name": "AtLeastOneConstructor",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Each non-static class should declare at least one constructor. Classes with solely static members are ignored, refer to UseUtilityClassRule to detect those.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#atleastoneconstructor"
    ]
  },
  {
    "name": "AvoidAccessibilityAlteration",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Methods such as `getDeclaredConstructors()`, `getDeclaredMethods()`, and `getDeclaredFields()` also return private constructors, methods and fields. These can be made accessible by calling `setAccessible(true)`. This gives access to normally protected data which violates the principle of encapsulation. This rule detects calls to `setAccessible` and finds possible accessibility... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidaccessibilityalteration",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidaccessibilityalteration"
    ]
  },
  {
    "name": "AvoidArrayLoops",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Instead of manually copying data between two arrays, use the more efficient `Arrays.copyOf` or `System.arraycopy` method instead. To copy only part of the array, use `Arrays.copyOfRange` or `System.arraycopy`. If you want to copy/move elements inside the _same_ array (e.g. shift the elements), use `System.arraycopy`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#avoidarrayloops"
    ]
  },
  {
    "name": "AvoidAssertAsIdentifier",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Use of the term `assert` will conflict with newer versions of Java since it is a reserved word. Since Java 1.4, the token `assert` became a reserved word and using it as an identifier will result in a compilation failure for Java 1.4 and later. This rule is therefore only useful for old Java code before Java 1.4. It can be used to identify problematic code prior to a Java update.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidassertasidentifier"
    ]
  },
  {
    "name": "AvoidBranchingStatementAsLastInLoop",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Using a branching statement as the last part of a loop may be a bug, and/or is confusing. Ensure that the usage is not a bug, or consider using another approach.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop"
    ]
  },
  {
    "name": "AvoidCalendarDateCreation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Problem: `java.util.Calendar` is a heavyweight object and expensive to create. It should only be used, if calendar calculations are needed. Solution: Use `new Date()`, Java 8+ `java.time.LocalDateTime.now()` or `ZonedDateTime.now()`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#avoidcalendardatecreation"
    ]
  },
  {
    "name": "AvoidCallingFinalize",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The method Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. It should not be invoked by application logic. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidcallingfinalize"
    ]
  },
  {
    "name": "AvoidCatchingGenericException",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#avoidcatchinggenericexception"
    ]
  },
  {
    "name": "AvoidCatchingNPE",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidcatchingnpe"
    ]
  },
  {
    "name": "AvoidCatchingThrowable",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidcatchingthrowable"
    ]
  },
  {
    "name": "AvoidConsoleStatements",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "ecmascriptLanguage"
    ],
    "description": "Using the console for logging in production might negatively impact performance. In addition, logging could expose sensitive data.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_performance.html#avoidconsolestatements"
    ]
  },
  {
    "name": "AvoidDebugStatements",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "apexLanguage"
    ],
    "description": "Debug statements contribute to longer transactions and consume Apex CPU time even when debug logs are not being captured. When possible make use of other debugging techniques such as the Apex Replay Debugger and Checkpoints that could cover *most* use cases. For other valid use cases that the statement is in fact valid make use of the `@SuppressWarnings` annotation or the `//NOPMD` comment.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_performance.html#avoiddebugstatements"
    ]
  },
  {
    "name": "AvoidDecimalLiteralsInBigDecimalConstructor",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "One might assume that the result of \"new BigDecimal(0.1)\" is exactly equal to 0.1, but it is actually equal to .1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finite length). Thus, the long value that is being passed in to the constructor is not exactly equal to... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoiddecimalliteralsinbigdecimalconstructor",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoiddecimalliteralsinbigdecimalconstructor"
    ]
  },
  {
    "name": "AvoidDeeplyNestedIfStmts",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#avoiddeeplynestedifstmts"
    ]
  },
  {
    "name": "AvoidDeeplyNestedIfStmts-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#avoiddeeplynestedifstmts"
    ]
  },
  {
    "name": "AvoidDirectAccessTriggerMap",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Avoid directly accessing Trigger.old and Trigger.new as it can lead to a bug. Triggers should be bulkified and iterate through the map to handle the actions for each item separately.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#avoiddirectaccesstriggermap"
    ]
  },
  {
    "name": "AvoidDollarSigns",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Avoid using dollar signs in variable/method/class/interface names.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#avoiddollarsigns"
    ]
  },
  {
    "name": "AvoidDuplicateLiterals",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Code containing duplicate String literals can usually be improved by declaring the String as a constant field.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidduplicateliterals"
    ]
  },
  {
    "name": "AvoidEnumAsIdentifier",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Use of the term `enum` will conflict with newer versions of Java since it is a reserved word. Since Java 1.5, the token `enum` became a reserved word and using it as an identifier will result in a compilation failure for Java 1.5 and later. This rule is therefore only useful for old Java code before Java 1.5. It can be used to identify problematic code prior to a Java update.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidenumasidentifier"
    ]
  },
  {
    "name": "AvoidFieldNameMatchingMethodName",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "It can be confusing to have a field name with the same name as a method. While this is permitted, having information (field) and actions (method) is not clear naming. Developers versed in Smalltalk often prefer this approach as the methods denote accessor methods.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname"
    ]
  },
  {
    "name": "AvoidFieldNameMatchingTypeName",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "It is somewhat confusing to have a field name matching the declaring type name. This probably means that type and/or field names should be chosen more carefully.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename"
    ]
  },
  {
    "name": "AvoidFileStream",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "The FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage collection pauses. See JDK-8080225 for details. The FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream, again causing garbage collection issues while finalizer methods are called. * Use `Files.newInputStream(Paths.get(fileName))` instead of `new FileInputStr... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#avoidfilestream",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#avoidfilestream"
    ]
  },
  {
    "name": "AvoidGlobalModifier",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "Global classes should be avoided (especially in managed packages) as they can never be deleted or changed in signature. Always check twice if something needs to be global. Many interfaces (e.g. Batch) required global modifiers in the past but don't require this anymore. Don't lock yourself in.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#avoidglobalmodifier"
    ]
  },
  {
    "name": "AvoidHardcodingId",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "When deploying Apex code between sandbox and production environments, or installing Force.com AppExchange packages, it is essential to avoid hardcoding IDs in the Apex code. By doing so, if the record IDs change between environments, the logic can dynamically identify the proper data to operate against and not fail.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#avoidhardcodingid"
    ]
  },
  {
    "name": "AvoidInlineStyles",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "htmlLanguage"
    ],
    "description": "Don't mix content and style. Use separate CSS-files for the style and introduce classes. This helps to reuse common styles.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_html_bestpractices.html#avoidinlinestyles"
    ]
  },
  {
    "name": "AvoidInstanceofChecksInCatchClause",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Each caught exception type should be handled in its own catch clause.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause"
    ]
  },
  {
    "name": "AvoidInstantiatingObjectsInLoops",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "New objects created within loops should be checked to see if they can created outside them and reused.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#avoidinstantiatingobjectsinloops"
    ]
  },
  {
    "name": "AvoidLiteralsInIfCondition",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Avoid using hard-coded literals in conditional statements. By declaring them as static variables or private members with descriptive names maintainability is enhanced. By default, the literals \"-1\" and \"0\" are ignored. More exceptions can be defined with the property \"ignoreMagicNumbers\". The rule doesn't consider deeper expressions by default, but this can be enabled via the property... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidliteralsinifcondition",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidliteralsinifcondition"
    ]
  },
  {
    "name": "AvoidLogicInTrigger",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "As triggers do not allow methods like regular classes they are less flexible and suited to apply good encapsulation style. Therefore delegate the triggers work to a regular class (often called Trigger handler class). See more here: <https://developer.salesforce.com/page/Trigger_Frameworks_and_Apex_Trigger_Best_Practices>",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#avoidlogicintrigger"
    ]
  },
  {
    "name": "AvoidLosingExceptionInformation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Statements in a catch block that invoke accessors on the exception without using the information only add to code size. Either remove the invocation, or use the return result.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidlosingexceptioninformation"
    ]
  },
  {
    "name": "AvoidMessageDigestField",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Declaring a MessageDigest instance as a field make this instance directly available to multiple threads. Such sharing of MessageDigest instances should be avoided if possible since it leads to wrong results if the access is not synchronized correctly. Just create a new instance and use it locally, where you need it. Creating a new instance is easier than synchronizing access to a shared instance.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidmessagedigestfield"
    ]
  },
  {
    "name": "AvoidMultipleUnaryOperators",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The use of multiple unary operators may be problematic, and/or confusing. Ensure that the intended usage is not a bug, or consider simplifying the expression.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidmultipleunaryoperators"
    ]
  },
  {
    "name": "AvoidNonExistentAnnotations",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Apex supported non existent annotations for legacy reasons. In the future, use of such non-existent annotations could result in broken apex code that will not compile. This will prevent users of garbage annotations from being able to use legitimate annotations added to Apex in the future. A full list of supported annotations can be found at https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_annotation.htm",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#avoidnonexistentannotations"
    ]
  },
  {
    "name": "AvoidNonRestrictiveQueries",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "apexLanguage"
    ],
    "description": "When working with very large amounts of data, unfiltered SOQL or SOSL queries can quickly cause governor limit exceptions.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_performance.html#avoidnonrestrictivequeries"
    ]
  },
  {
    "name": "AvoidPrintStackTrace",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Avoid printStackTrace(); use a logger call instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidprintstacktrace"
    ]
  },
  {
    "name": "AvoidProtectedFieldInFinalClass",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Do not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass"
    ]
  },
  {
    "name": "AvoidProtectedMethodInFinalClassNotExtending",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whose visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#avoidprotectedmethodinfinalclassnotextending"
    ]
  },
  {
    "name": "AvoidReassigningCatchVariables",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reassigning exception variables caught in a catch statement should be avoided because of: 1) If it is needed, multi catch can be easily added and code will still compile. 2) Following the principle of least surprise we want to make sure that a variable caught in a catch statement is always the one thrown in a try block.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidreassigningcatchvariables"
    ]
  },
  {
    "name": "AvoidReassigningLoopVariables",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reassigning loop variables can lead to hard-to-find bugs. Prevent or limit how these variables can be changed. In foreach-loops, configured by the `foreachReassign` property: - `deny`: Report any reassignment of the loop variable in the loop body. _This is the default._ - `allow`: Don't check the loop variable. - `firstOnly`: Report any reassignments of the loop variable, except... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables"
    ]
  },
  {
    "name": "AvoidReassigningParameters",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reassigning values to incoming parameters of a method or constructor is not recommended, as this can make the code more difficult to understand. The code is often read with the assumption that parameter values don't change and an assignment violates therefore the principle of least astonishment. This is especially a problem if the parameter is documented e.g. in the method's... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidreassigningparameters",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidreassigningparameters"
    ]
  },
  {
    "name": "AvoidRethrowingException",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#avoidrethrowingexception"
    ]
  },
  {
    "name": "AvoidStringBufferField",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks if held within objects with long lifetimes.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidstringbufferfield"
    ]
  },
  {
    "name": "AvoidSynchronizedAtMethodLevel",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Method-level synchronization will pin virtual threads and can cause performance problems. Additionally, it can cause problems when new code is added to the method. Block-level ReentrantLock helps to ensure that only the code that needs mutual exclusion will be locked.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel"
    ]
  },
  {
    "name": "AvoidSynchronizedStatement",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Synchronization will pin virtual threads and can cause performance problems.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#avoidsynchronizedstatement"
    ]
  },
  {
    "name": "AvoidThreadGroup",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread-safe.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#avoidthreadgroup"
    ]
  },
  {
    "name": "AvoidThrowingNewInstanceOfSameException",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#avoidthrowingnewinstanceofsameexception"
    ]
  },
  {
    "name": "AvoidThrowingNullPointerException",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Avoid throwing NullPointerExceptions manually. These are confusing because most people will assume that the virtual machine threw it. To avoid a method being called with a null parameter, you may consider using an IllegalArgumentException instead, making it clearly seen as a programmer-initiated exception. However, there are better ways to handle this: >*Effective Java, 3rd... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#avoidthrowingnullpointerexception",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#avoidthrowingnullpointerexception"
    ]
  },
  {
    "name": "AvoidThrowingRawExceptionTypes",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes"
    ]
  },
  {
    "name": "AvoidTrailingComma",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "ecmascriptLanguage"
    ],
    "description": "This rule helps improve code portability due to differences in browser treatment of trailing commas in object or array literals.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_errorprone.html#avoidtrailingcomma"
    ]
  },
  {
    "name": "AvoidUncheckedExceptionsInSignatures",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Reports unchecked exceptions in the `throws` clause of a method or constructor. Java doesn't force the caller to handle an unchecked exception, so it's unnecessary except for documentation. A better practice is to document the exceptional cases with a `@throws` Javadoc tag, which allows being more descriptive.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures"
    ]
  },
  {
    "name": "AvoidUsingHardCodedIP",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Application with hard-coded IP addresses can become impossible to deploy in some cases. Externalizing IP adresses is preferable.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#avoidusinghardcodedip"
    ]
  },
  {
    "name": "AvoidUsingNativeCode",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability and increases the maintenance burden.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#avoidusingnativecode"
    ]
  },
  {
    "name": "AvoidUsingOctalValues",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#avoidusingoctalvalues"
    ]
  },
  {
    "name": "AvoidUsingVolatile",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Use of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requires a good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore, the volatile keyword should not be used for maintenance purpose and portability.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#avoidusingvolatile"
    ]
  },
  {
    "name": "AvoidWithStatement",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "ecmascriptLanguage"
    ],
    "description": "Avoid using with - it's bad news",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_bestpractices.html#avoidwithstatement"
    ]
  },
  {
    "name": "BigIntegerInstantiation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Don't create instances of already existing BigInteger (`BigInteger.ZERO`, `BigInteger.ONE`), for Java 1.5 onwards, BigInteger.TEN and BigDecimal (`BigDecimal.ZERO`, `BigDecimal.ONE`, `BigDecimal.TEN`) and for Java 9 onwards `BigInteger.TWO`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#bigintegerinstantiation"
    ]
  },
  {
    "name": "BooleanGetMethodName",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Methods that return boolean or Boolean results should be named as predicate statements to denote this. I.e., 'isReady()', 'hasValues()', 'canCommit()', 'willFail()', etc. Avoid the use of the 'get' prefix for these methods.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#booleangetmethodname"
    ]
  },
  {
    "name": "BrokenNullCheck",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of && or vice versa.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#brokennullcheck"
    ]
  },
  {
    "name": "CallSuperFirst",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Super should be called at the start of the method",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#callsuperfirst"
    ]
  },
  {
    "name": "CallSuperInConstructor",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "It is a good practice to call super() in a constructor. If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#callsuperinconstructor"
    ]
  },
  {
    "name": "CallSuperLast",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Super should be called at the end of the method",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#callsuperlast"
    ]
  },
  {
    "name": "CheckResultSet",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is 'false', it should be handled properly.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#checkresultset"
    ]
  },
  {
    "name": "CheckSkipResult",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#checkskipresult"
    ]
  },
  {
    "name": "ClassCastExceptionWithToArray",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "When deriving an array of a specific class from your Collection, one should provide an array of the same class as the parameter of the `toArray()` method. Doing otherwise will result in a `ClassCastException`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#classcastexceptionwithtoarray"
    ]
  },
  {
    "name": "ClassNamingConventions",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Configurable naming conventions for type declarations. This rule reports type declarations which do not match the regex that applies to their specific kind (e.g. enum or interface). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Pascal case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#classnamingconventions"
    ]
  },
  {
    "name": "ClassNamingConventions-java",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Configurable naming conventions for type declarations. This rule reports type declarations which do not match the regex that applies to their specific kind (e.g. enum or interface). Each regex can be configured through properties. By default, this rule uses the standard Java naming convention (Pascal case). The rule can detect utility classes and enforce a different naming convention on... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#classnamingconventions",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#classnamingconventions"
    ]
  },
  {
    "name": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Reports classes that may be made final because they cannot be extended from outside their compilation unit anyway. This is because all their constructors are private, so a subclass could not call the super constructor.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal"
    ]
  },
  {
    "name": "CloneMethodMustBePublic",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The java manual says \"By convention, classes that implement this interface should override Object.clone (which is protected) with a public method.\"",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#clonemethodmustbepublic"
    ]
  },
  {
    "name": "CloneMethodMustImplementCloneable",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException. The rule can also detect, if the class implements or extends a Cloneable class.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#clonemethodmustimplementcloneable"
    ]
  },
  {
    "name": "CloneMethodReturnTypeMustMatchClassName",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "If a class implements `Cloneable` the return type of the method `clone()` must be the class name. That way, the caller of the clone method doesn't need to cast the returned clone to the correct type. Note: Such a covariant return type is only possible with Java 1.5 or higher.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname"
    ]
  },
  {
    "name": "CloseResource",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Ensure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects and any subtype of `java.lang.AutoCloseable`) are always closed after use. Failing to do so might result in resource leaks. Note: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers on any subtype (e.g. `java.io.FileInputStream`).... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#closeresource",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#closeresource"
    ]
  },
  {
    "name": "CognitiveComplexity",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "Methods that are highly complex are difficult to read and more costly to maintain. If you include too much decisional logic within a single method, you make its behavior hard to understand and more difficult to modify. Cognitive complexity is a measure of how difficult it is for humans to read and understand a method. Code that contains a break in the control flow is more complex, whereas the... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#cognitivecomplexity",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#cognitivecomplexity"
    ]
  },
  {
    "name": "CognitiveComplexity-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Methods that are highly complex are difficult to read and more costly to maintain. If you include too much decisional logic within a single method, you make its behavior hard to understand and more difficult to modify. Cognitive complexity is a measure of how difficult it is for humans to read and understand a method. Code that contains a break in the control flow is more complex, whereas the... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#cognitivecomplexity",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#cognitivecomplexity"
    ]
  },
  {
    "name": "CollapsibleIfStatements",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Reports nested 'if' statements that can be merged together by joining their conditions with a boolean `&&` operator in between.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#collapsibleifstatements"
    ]
  },
  {
    "name": "CommentContent",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Documentation",
      "javaLanguage"
    ],
    "description": "A rule for the politically correct... we don't want to offend anyone.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_documentation.html#commentcontent"
    ]
  },
  {
    "name": "CommentDefaultAccessModifier",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "To avoid mistakes if we want that an Annotation, Class, Enum, Method, Constructor or Field have a default access modifier we must add a comment at the beginning of its declaration. By default, the comment must be `/* default */` or `/* package */`, if you want another, you have to provide a regular expression. This rule ignores by default all cases that have a `@VisibleForTesting`... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#commentdefaultaccessmodifier",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#commentdefaultaccessmodifier"
    ]
  },
  {
    "name": "CommentRequired",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Documentation",
      "javaLanguage"
    ],
    "description": "Denotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_documentation.html#commentrequired"
    ]
  },
  {
    "name": "CommentSize",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Documentation",
      "javaLanguage"
    ],
    "description": "Determines whether the dimensions of non-header comments found are within the specified limits.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_documentation.html#commentsize"
    ]
  },
  {
    "name": "CompareObjectsWithEquals",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Use `equals()` to compare object references; avoid comparing them with `==`. Since comparing objects with named constants is useful in some cases (eg, when defining constants for sentinel values), the rule ignores comparisons against fields with all-caps name (eg `this == SENTINEL`), which is a common naming convention for constant fields. You may allow some types to be compared by reference by listing the exceptions in the `typesThatCompareByReference` property.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#compareobjectswithequals"
    ]
  },
  {
    "name": "ComparisonWithNaN",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Reports comparisons with double and float `NaN` (Not-a-Number) values. These are specified to have unintuitive behavior: NaN is considered unequal to itself. This means a check like `someDouble == Double.NaN` will always return false, even if `someDouble` is really the NaN value. To test whether a value is the NaN value, one should instead use `Double.isNaN(someDouble)` (or `Float.isNaN`). The... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#comparisonwithnan",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#comparisonwithnan"
    ]
  },
  {
    "name": "ConfusingArgumentToVarargsMethod",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Reports a confusing argument passed to a varargs method. This can occur when an array is passed as a single varargs argument, when the array type is not exactly the type of array that the varargs method expects. If, that array is a subtype of the component type of the expected array type, then it might not be clear what value the called varargs method will receive. For instance... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#confusingargumenttovarargsmethod",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#confusingargumenttovarargsmethod"
    ]
  },
  {
    "name": "ConfusingTernary",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Avoid negation within an \"if\" expression with an \"else\" clause. For example, rephrase: `if (x != y) diff(); else same();` as: `if (x == y) same(); else diff();`. Most \"if (x != y)\" cases without an \"else\" are often return cases, so consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as \"does the error case go first?\" or \"does the common case go first?\".",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#confusingternary"
    ]
  },
  {
    "name": "ConsecutiveAppendsShouldReuse",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Consecutive calls to StringBuffer/StringBuilder .append should be chained, reusing the target object. This can improve the performance by producing a smaller bytecode, reducing overhead and improving inlining. A complete analysis can be found here",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#consecutiveappendsshouldreuse"
    ]
  },
  {
    "name": "ConsecutiveLiteralAppends",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Consecutively calling StringBuffer/StringBuilder.append(...) with literals should be avoided. Since the literals are constants, they can already be combined into a single String literal and this String can be appended in a single method call.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#consecutiveliteralappends"
    ]
  },
  {
    "name": "ConsistentReturn",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "ecmascriptLanguage"
    ],
    "description": "ECMAScript does provide for return types on functions, and therefore there is no solid rule as to their usage. However, when a function does use returns they should all have a value, or all with no value. Mixed return usage is likely a bug, or at best poor style.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_bestpractices.html#consistentreturn"
    ]
  },
  {
    "name": "ConstantsInInterface",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Using constants in interfaces is a bad practice. Interfaces define types, constants are implementation details better placed in classes or enums. If the constants are best viewed as members of an enumerated type, you should export them with an enum type. For other scenarios, consider using a utility class. See Effective Java's 'Use interfaces only to define types'.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#constantsininterface"
    ]
  },
  {
    "name": "ConstructorCallsOverridableMethod",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Reports calls to overridable methods on `this` during object initialization. These are invoked on an incompletely constructed object and can be difficult to debug if overridden. This is because the subclass usually assumes that the superclass is completely initialized in all methods. If that is not the case, bugs can appear in the constructor, for instance, some fields that are... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod"
    ]
  },
  {
    "name": "ControlStatementBraces",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else' statements and loop statements, even if they are optional. This usually makes the code clearer, and helps prepare the future when you need to add another statement. That said, this rule lets you control which statements are required to have braces via properties. From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces, and IfElseStmtMustUseBraces.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#controlstatementbraces"
    ]
  },
  {
    "name": "CouplingBetweenObjects",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "This rule counts the number of unique attributes, local variables, and return types within an object. A number higher than the specified threshold can indicate a high degree of coupling.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#couplingbetweenobjects"
    ]
  },
  {
    "name": "CyclomaticComplexity",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic in a single method makes its behaviour hard to read and change. Cyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method, plus one for the method entry. Decision points are places where the control flow jumps to another... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#cyclomaticcomplexity",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#cyclomaticcomplexity"
    ]
  },
  {
    "name": "CyclomaticComplexity-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic in a single method makes its behaviour hard to read and change. Cyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method, plus one for the method entry. Decision points are places where the control flow jumps to another... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#cyclomaticcomplexity",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#cyclomaticcomplexity"
    ]
  },
  {
    "name": "DataClass",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Data Classes are simple data holders, which reveal most of their state, and without complex functionality. The lack of functionality may indicate that their behaviour is defined elsewhere, which is a sign of poor data-behaviour proximity. By directly exposing their internals, Data Classes break encapsulation, and therefore reduce the system's maintainability and understandability. Moreover, classes tend... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#dataclass",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#dataclass"
    ]
  },
  {
    "name": "DebugsShouldUseLoggingLevel",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "The first parameter of System.debug, when using the signature with two parameters, is a LoggingLevel enum. Having the Logging Level specified provides a cleaner log, and improves readability of it.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel"
    ]
  },
  {
    "name": "DefaultLabelNotLastInSwitch",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "By convention, the default label should be the last label in a switch statement or switch expression. Note: This rule has been renamed from \"DefaultLabelNotLastInSwitchStmt\" with PMD {{PMD_VERSION}}.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#defaultlabelnotlastinswitch"
    ]
  },
  {
    "name": "DetachedTestCase",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The method appears to be a test case since it has public or default visibility, non-static access, no arguments, no return value, has no annotations, but is a member of a class that has one or more JUnit test cases. If it is a utility method, it should likely have private visibility. If it is an ignored test, it should be annotated with @Test and @Ignore.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#detachedtestcase"
    ]
  },
  {
    "name": "DoNotCallGarbageCollectionExplicitly",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Calls to `System.gc()`, `Runtime.getRuntime().gc()`, and `System.runFinalization()` are not advised. Code should have the same behavior whether the garbage collection is disabled using the option `-Xdisableexplicitgc` or not. Moreover, \"modern\" JVMs do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#donotcallgarbagecollectionexplicitly"
    ]
  },
  {
    "name": "DoNotExtendJavaLangError",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Errors are system exceptions. Do not extend them.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#donotextendjavalangerror"
    ]
  },
  {
    "name": "DoNotExtendJavaLangThrowable",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Extend Exception or RuntimeException instead of Throwable.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#donotextendjavalangthrowable"
    ]
  },
  {
    "name": "DoNotHardCodeSDCard",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Use Environment.getExternalStorageDirectory() instead of \"/sdcard\"",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#donothardcodesdcard"
    ]
  },
  {
    "name": "DoNotTerminateVM",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Web applications should not call `System.exit()`, since only the web container or the application server should stop the JVM. Otherwise a web application would terminate all other applications running on the same application server. This rule also checks for the equivalent calls `Runtime.getRuntime().exit()` and `Runtime.getRuntime().halt()`. This rule has been renamed from \"DoNotCallSystemExit\" in PMD 6.29.0.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#donotterminatevm"
    ]
  },
  {
    "name": "DoNotThrowExceptionInFinally",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Throwing exceptions within a 'finally' block is confusing since they may mask other exceptions or code defects. Note: This is a PMD implementation of the Lint4j rule \"A throw in a finally block\"",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally"
    ]
  },
  {
    "name": "DoNotUseThreads",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "The J2EE specification explicitly forbids the use of threads. Threads are resources, that should be managed and monitored by the J2EE server. If the application creates threads on its own or uses own custom thread pools, then these threads are not managed, which could lead to resource exhaustion. Also, EJBs might be moved between machines in a cluster and only managed resources can be moved along.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#donotusethreads"
    ]
  },
  {
    "name": "DontCallThreadRun",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Explicitly calling Thread.run() method will execute in the caller's thread of control. Instead, call Thread.start() for the intended behavior.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#dontcallthreadrun"
    ]
  },
  {
    "name": "DontImportSun",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change. If you find yourself having to depend on Sun APIs, confine this dependency to as small a scope as possible, for instance by writing a stable wrapper class around the unstable API. You can then suppress this rule in the implementation of the wrapper.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#dontimportsun"
    ]
  },
  {
    "name": "DontUseFloatTypeForLoopIndices",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Don't use floating point for loop indices. If you must use floating point, use double unless you're certain that float provides enough precision and you have a compelling performance need (space or time).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#dontusefloattypeforloopindices"
    ]
  },
  {
    "name": "DoubleBraceInitialization",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Double brace initialisation is a pattern to initialise eg collections concisely. But it implicitly generates a new .class file, and the object holds a strong reference to the enclosing object. For those reasons, it is preferable to initialize the object normally, even though it's verbose. This rule counts any anonymous class which only has a single initializer as an instance of... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#doublebraceinitialization",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#doublebraceinitialization"
    ]
  },
  {
    "name": "DoubleCheckedLocking",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Partially created objects can be returned by the Double Checked Locking pattern when used in Java. An optimizing JRE may assign a reference to the baz variable before it calls the constructor of the object the reference points to. Note: With Java 5, you can make Double checked locking work, if you declare the variable to be `volatile`. For more details refer to: <http://www.javaworld.co... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#doublecheckedlocking",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#doublecheckedlocking"
    ]
  },
  {
    "name": "EagerlyLoadedDescribeSObjectResult",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "apexLanguage"
    ],
    "description": "This rule finds `DescribeSObjectResult`s which could have been loaded eagerly via `SObjectType.getDescribe()`. When using `SObjectType.getDescribe()` or `Schema.describeSObjects()` without supplying a `SObjectDescribeOptions`, implicitly it will be using `SObjectDescribeOptions.DEFAULT` and then all child relationships will be loaded eagerly regardless whether this informatio... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_performance.html#eagerlyloadeddescribesobjectresult",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_performance.html#eagerlyloadeddescribesobjectresult"
    ]
  },
  {
    "name": "EmptyCatchBlock",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#emptycatchblock"
    ]
  },
  {
    "name": "EmptyCatchBlock-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#emptycatchblock"
    ]
  },
  {
    "name": "EmptyControlStatement",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: - bodies of `try` statements - `finally` clauses of `try` statements - `switch` statements - `synchronized` statements - `if` statements - loop statements: `while`, `for`, `do .. while` - initializers - blocks used as statements (for scoping) This rule replaces the... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#emptycontrolstatement",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#emptycontrolstatement"
    ]
  },
  {
    "name": "EmptyFinalizer",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Empty finalize methods serve no purpose and should be removed. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#emptyfinalizer"
    ]
  },
  {
    "name": "EmptyIfStmt",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Empty If Statement finds instances where a condition is checked but nothing is done about it.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#emptyifstmt"
    ]
  },
  {
    "name": "EmptyMethodInAbstractClassShouldBeAbstract",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract"
    ]
  },
  {
    "name": "EmptyStatementBlock",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Empty block statements serve no purpose and should be removed.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#emptystatementblock"
    ]
  },
  {
    "name": "EmptyTryOrFinallyBlock",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Avoid empty try or finally blocks - what's the point?",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#emptytryorfinallyblock"
    ]
  },
  {
    "name": "EmptyWhileStmt",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the exit expression, rewrite it to make it clearer.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#emptywhilestmt"
    ]
  },
  {
    "name": "EqualComparison",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "ecmascriptLanguage"
    ],
    "description": "Using == in condition may lead to unexpected results, as the variables are automatically casted to be of the same type. The === operator avoids the casting.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_errorprone.html#equalcomparison"
    ]
  },
  {
    "name": "EqualsNull",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Tests for null should not use the equals() method. The '==' operator should be used instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#equalsnull"
    ]
  },
  {
    "name": "ExceptionAsFlowControl",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "This rule reports exceptions thrown and caught in an enclosing try statement. This use of exceptions as a form of `goto` statement is discouraged, as that may hide actual exceptions, and obscures control flow, especially when debugging. To fix a violation, add the necessary validation or use an alternate control structure.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#exceptionasflowcontrol"
    ]
  },
  {
    "name": "ExcessiveClassLength",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methods apart the code becomes more managable and ripe for reuse.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#excessiveclasslength"
    ]
  },
  {
    "name": "ExcessiveImports",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of unique imports and reports a violation if the count is above the user-specified threshold.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#excessiveimports"
    ]
  },
  {
    "name": "ExcessiveParameterList",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#excessiveparameterlist"
    ]
  },
  {
    "name": "ExcessiveParameterList-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#excessiveparameterlist"
    ]
  },
  {
    "name": "ExcessivePublicCount",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "Classes with large numbers of public methods, attributes, and properties require disproportionate testing efforts since combinatorial side effects grow rapidly and increase risk. Refactoring these classes into smaller ones not only increases testability and reliability but also allows new variations to be developed easily.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#excessivepubliccount"
    ]
  },
  {
    "name": "ExcessivePublicCount-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. Refactoring these classes into smaller ones not only increases testability and reliability but also allows new variations to be developed easily.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#excessivepubliccount"
    ]
  },
  {
    "name": "ExtendsObject",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "No need to explicitly extend Object.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#extendsobject"
    ]
  },
  {
    "name": "FieldDeclarationsShouldBeAtStart",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Field declarations should appear before method declarations within a class.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#fielddeclarationsshouldbeatstart"
    ]
  },
  {
    "name": "FieldDeclarationsShouldBeAtStartOfClass",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass"
    ]
  },
  {
    "name": "FieldNamingConventions",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Configurable naming conventions for field declarations. This rule reports variable declarations which do not match the regex that applies to their specific kind ---e.g. constants (static final), static field, final field. Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#fieldnamingconventions"
    ]
  },
  {
    "name": "FieldNamingConventions-java",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Configurable naming conventions for field declarations. This rule reports variable declarations which do not match the regex that applies to their specific kind ---e.g. constants (static final), enum constant, final field. Each regex can be configured through properties. By default this rule uses the standard Java naming convention (Camel case), and uses the ALL_UPPER convention for constants and enum constants.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#fieldnamingconventions"
    ]
  },
  {
    "name": "FinalFieldCouldBeStatic",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#finalfieldcouldbestatic"
    ]
  },
  {
    "name": "FinalizeDoesNotCallSuperFinalize",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "If the finalize() is implemented, its last action should be to call super.finalize. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#finalizedoesnotcallsuperfinalize"
    ]
  },
  {
    "name": "FinalizeOnlyCallsSuperFinalize",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "If the finalize() is implemented, it should do something besides just calling super.finalize(). Note that Oracle has declared Object.finalize() as deprecated since JDK 9.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#finalizeonlycallssuperfinalize"
    ]
  },
  {
    "name": "FinalizeOverloaded",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Methods named finalize() should not have parameters. It is confusing and most likely an attempt to overload Object.finalize(). It will not be called by the VM. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#finalizeoverloaded"
    ]
  },
  {
    "name": "FinalizeShouldBeProtected",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "When overriding the finalize(), the new method should be set as protected. If made public, other classes may invoke it at inappropriate times. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#finalizeshouldbeprotected"
    ]
  },
  {
    "name": "FinalParameterInAbstractMethod",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Declaring a method parameter as final for an interface method is useless because the implementation may choose to not respect it.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#finalparameterinabstractmethod"
    ]
  },
  {
    "name": "ForLoopCanBeForeach",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over lists, arrays and iterators. A loop is safe to replace if it only uses the index variable to access an element of the list or array, only has one update statement, and loops through *every* element of the list or array left to right.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#forloopcanbeforeach"
    ]
  },
  {
    "name": "ForLoopShouldBeWhileLoop",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Some for loops can be simplified to while loops, this makes them more concise.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#forloopshouldbewhileloop"
    ]
  },
  {
    "name": "ForLoopsMustUseBraces",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Avoid using 'for' statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#forloopsmustusebraces"
    ]
  },
  {
    "name": "ForLoopsMustUseBraces-ecmascript",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "Avoid using 'for' statements without using curly braces.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#forloopsmustusebraces"
    ]
  },
  {
    "name": "ForLoopVariableCount",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Having a lot of control variables in a 'for' loop makes it harder to see what range of values the loop iterates over. By default this rule allows a regular 'for' loop with only one variable.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#forloopvariablecount"
    ]
  },
  {
    "name": "FormalParameterNamingConventions",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Configurable naming conventions for formal parameters of methods. This rule reports formal parameters which do not match the regex that applies to their specific kind (e.g. method parameter, or final method parameter). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#formalparameternamingconventions"
    ]
  },
  {
    "name": "FormalParameterNamingConventions-java",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Configurable naming conventions for formal parameters of methods and lambdas. This rule reports formal parameters which do not match the regex that applies to their specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be configured through properties. By default this rule uses the standard Java naming convention (Camel case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#formalparameternamingconventions"
    ]
  },
  {
    "name": "GenericsNaming",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Names for references to generic values should be limited to a single uppercase letter.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#genericsnaming"
    ]
  },
  {
    "name": "GlobalVariable",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "ecmascriptLanguage"
    ],
    "description": "This rule helps to avoid using accidently global variables by simply missing the \"var\" declaration. Global variables can lead to side-effects that are hard to debug.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_bestpractices.html#globalvariable"
    ]
  },
  {
    "name": "GodClass",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "The God Class rule detects the God Class design flaw using metrics. God classes do too many things, are very big and overly complex. They should be split apart to be more object-oriented. The rule uses the detection strategy described in \"Object-Oriented Metrics in Practice\". The violations are reported against the entire class. The rule uses metrics to implement its detection strategy. The violation... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#godclass",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#godclass"
    ]
  },
  {
    "name": "GuardLogStatement",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Whenever using a log level, one should check if it is actually enabled, or otherwise skip the associate String creation and manipulation, as well as any method calls. An alternative to checking the log level are substituting parameters, formatters or lazy logging with lambdas. The available alternatives depend on the actual logging framework.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#guardlogstatement"
    ]
  },
  {
    "name": "HardCodedCryptoKey",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "javaLanguage"
    ],
    "description": "Do not use hard coded values for cryptographic operations. Please store keys outside of source code.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_security.html#hardcodedcryptokey"
    ]
  },
  {
    "name": "IdempotentOperations",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Avoid idempotent operations - they have no effect.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#idempotentoperations"
    ]
  },
  {
    "name": "IdenticalCatchBranches",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Identical `catch` branches use up vertical space and increase the complexity of code without adding functionality. It's better style to collapse identical branches into a single multi-catch branch.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#identicalcatchbranches"
    ]
  },
  {
    "name": "IfElseStmtsMustUseBraces",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Avoid using if..else statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#ifelsestmtsmustusebraces"
    ]
  },
  {
    "name": "IfElseStmtsMustUseBraces-ecmascript",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "Avoid using if..else statements without using curly braces.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#ifelsestmtsmustusebraces"
    ]
  },
  {
    "name": "IfStmtsMustUseBraces",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Avoid using if statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#ifstmtsmustusebraces"
    ]
  },
  {
    "name": "IfStmtsMustUseBraces-ecmascript",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "Avoid using if statements without using curly braces.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#ifstmtsmustusebraces"
    ]
  },
  {
    "name": "ImmutableField",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Reports non-final fields whose value never changes once object initialization ends, and hence may be marked final. Note that this rule does not enforce that the field value be deeply immutable itself. An object can still have mutable state, even if all its member fields are declared final. This is referred to as shallow immutability. For more information on mutability, see *Effective Java, 3rd Edition, Item 17: Minimize mutability*. Limitations: We can only check private fields for now.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#immutablefield"
    ]
  },
  {
    "name": "ImplicitSwitchFallThrough",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Switch statements without break or return statements for each case option may indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through. You can ignore a violation by commenting `// fallthrough` before the case label which is reached by fallthrough, or with `@SuppressWarnings(\"fallthrough\")`. This rule has been renamed from \"MissingBreakInSwitch\" in PMD 6.37.0.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#implicitswitchfallthrough"
    ]
  },
  {
    "name": "InaccessibleAuraEnabledGetter",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "In the Summer '21 release, a mandatory security update enforces access modifiers on Apex properties in Lightning component markup. The update prevents access to private or protected Apex getters from Aura and Lightning Web Components.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#inaccessibleauraenabledgetter"
    ]
  },
  {
    "name": "InaccurateNumericLiteral",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "ecmascriptLanguage"
    ],
    "description": "The numeric literal will have a different value at runtime, which can happen if you provide too much precision in a floating point number. This may result in numeric calculations being in error. Numbers in JavaScript are represented by 64bit double-precision floating point numbers internally and that's why there are some limits to the available precision of the number. See Number.isSafeInteger() and Number.EPSILON. Note: This rule was named InnaccurateNumericLiteral before PMD 7.4.0.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_errorprone.html#inaccuratenumericliteral"
    ]
  },
  {
    "name": "InefficientEmptyStringCheck",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "String.trim().length() == 0 (or String.trim().isEmpty() for the same reason) is an inefficient way to check if a String is really blank, as it creates a new String object just to check its size. Consider creating a static function that loops through a string, checking Character.isWhitespace() on each character and returning false if a non-whitespace character is found. A Smarter... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#inefficientemptystringcheck",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#inefficientemptystringcheck"
    ]
  },
  {
    "name": "InefficientStringBuffering",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will need to be be created and destroyed by the JVM.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#inefficientstringbuffering"
    ]
  },
  {
    "name": "InsecureCryptoIv",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "javaLanguage"
    ],
    "description": "Do not use hard coded initialization vector in cryptographic operations. Please use a randomly generated IV.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_security.html#insecurecryptoiv"
    ]
  },
  {
    "name": "InstantiationToGetClass",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#instantiationtogetclass"
    ]
  },
  {
    "name": "InsufficientStringBufferDeclaration",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Failing to pre-size a StringBuffer or StringBuilder properly could cause it to re-size many times during runtime. This rule attempts to determine the total number the characters that are actually passed into StringBuffer.append(), but represents a best guess \"worst case\" scenario. An empty StringBuffer/StringBuilder constructor initializes the object to 16 characters. This default is assumed if the length of the constructor can not be determined.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#insufficientstringbufferdeclaration"
    ]
  },
  {
    "name": "InvalidJavaBean",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Identifies beans, that don't follow the JavaBeans API specification. Each non-static field should have both a getter and a setter method. If the field is just used internally and is not a bean property, then the field should be marked as `transient`. The rule verifies that the type of the field is the same as the result type of the getter. And that this type matches the type used in the setter. The... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#invalidjavabean",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#invalidjavabean"
    ]
  },
  {
    "name": "InvalidLogMessageFormat",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Check for messages in slf4j and log4j2 (since 6.19.0) loggers with non matching number of arguments and placeholders. Since 6.32.0 in addition to parameterized message placeholders (`{}`) also format specifiers of string formatted messages are supported (`%s`). This rule has been renamed from \"InvalidSlf4jMessageFormat\" in PMD 6.19.0.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#invalidlogmessageformat"
    ]
  },
  {
    "name": "JumbledIncrementer",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Avoid jumbled loop incrementers - it's usually a mistake, and is confusing even if intentional.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#jumbledincrementer"
    ]
  },
  {
    "name": "JUnit4SuitesShouldUseSuiteAnnotation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated through the @RunWith(Suite.class) annotation.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#junit4suitesshouldusesuiteannotation"
    ]
  },
  {
    "name": "JUnit5TestShouldBePackagePrivate",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reports JUnit 5 test classes and methods that are not package-private. Contrary to JUnit 4 tests, which required public visibility to be run by the engine, JUnit 5 tests can also be run if they're package-private. Marking them as such is a good practice to limit their visibility. Test methods are identified as those which use `@Test`, `@RepeatedTest`, `@TestFactory`, `@TestTemplate` or `@ParameterizedTest`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#junit5testshouldbepackageprivate"
    ]
  },
  {
    "name": "JUnitSpelling",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "In JUnit 3, the setUp method is used to set up all data entities required in running tests. The tearDown method is used to clean up all data entities required in running tests. You should not misspell method name if you want your test to set up and clean up everything correctly.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#junitspelling"
    ]
  },
  {
    "name": "JUnitStaticSuite",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The suite() method in a JUnit test needs to be both public and static.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#junitstaticsuite"
    ]
  },
  {
    "name": "JUnitUseExpected",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#junituseexpected"
    ]
  },
  {
    "name": "LambdaCanBeMethodReference",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance: ```java x -> Foo.call(x) // can be Foo::call x -> call(x) // can be this::call, if call is an instance method (x, y, z) -> call(x,... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#lambdacanbemethodreference"
    ]
  },
  {
    "name": "LawOfDemeter",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "The law of Demeter is a simple rule that says \"only talk to friends\". It forbids fetching data from \"too far away\", for some definition of distance, in order to reduce coupling between classes or objects of different levels of abstraction. The rule uses a notion of \"degree\", that quantifies how \"far\" an object is. Expressions with too high degree can only be used in certain ways. The degree of an... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#lawofdemeter",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#lawofdemeter"
    ]
  },
  {
    "name": "LinguisticNaming",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "This rule finds Linguistic Naming Antipatterns. It checks for fields, that are named, as if they should be boolean but have a different type. It also checks for methods, that according to their name, should return a boolean, but don't. Further, it checks, that getters return something and setters won't. Finally, it checks that methods, that start with \"to\" - so called transform methods -... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#linguisticnaming",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#linguisticnaming"
    ]
  },
  {
    "name": "LiteralsFirstInComparisons",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false. Note that switching literal positions for compareTo and compareToIgnoreCase may change the result, see examples.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#literalsfirstincomparisons"
    ]
  },
  {
    "name": "LocalHomeNamingConvention",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "The Local Home interface of a Session EJB should be suffixed by 'LocalHome'.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#localhomenamingconvention"
    ]
  },
  {
    "name": "LocalInterfaceSessionNamingConvention",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "The Local Interface of a Session EJB should be suffixed by 'Local'.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#localinterfacesessionnamingconvention"
    ]
  },
  {
    "name": "LocalVariableCouldBeFinal",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "A local variable assigned only once can be declared final.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#localvariablecouldbefinal"
    ]
  },
  {
    "name": "LocalVariableNamingConventions",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Configurable naming conventions for local variable declarations. This rule reports variable declarations which do not match the regex that applies to their specific kind (e.g. local variable, or final local variable). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#localvariablenamingconventions"
    ]
  },
  {
    "name": "LocalVariableNamingConventions-java",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Configurable naming conventions for local variable declarations and other locally-scoped variables. This rule reports variable declarations which do not match the regex that applies to their specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through properties. By default this rule uses the standard Java naming convention (Camel case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#localvariablenamingconventions"
    ]
  },
  {
    "name": "LogicInversion",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Use opposite operator instead of negating the whole expression with a logic complement operator.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#logicinversion"
    ]
  },
  {
    "name": "LongVariable",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Fields, formal arguments, or local variable names that are too long can make the code difficult to follow.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#longvariable"
    ]
  },
  {
    "name": "LooseCoupling",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Excessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate implementations in the future as requirements change. Whenever available, declare variables and parameters using a more general type (e.g, `Set`). This rule reports uses of concrete collection types. User-defined types that should be treated the same as interfaces can be configured with the property `allowedTypes`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#loosecoupling"
    ]
  },
  {
    "name": "LoosePackageCoupling",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Avoid using classes from the configured package hierarchy outside of the package hierarchy, except when using one of the configured allowed classes.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#loosepackagecoupling"
    ]
  },
  {
    "name": "MDBAndSessionBeanNamingConvention",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by 'Bean'.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#mdbandsessionbeannamingconvention"
    ]
  },
  {
    "name": "MethodArgumentCouldBeFinal",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Reports method and constructor parameters that can be made final because they are never reassigned within the body of the method. This rule ignores unused parameters so as not to overlap with the rule {% rule java/bestpractices/UnusedFormalParameter %}. It will also ignore the parameters of abstract methods.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#methodargumentcouldbefinal"
    ]
  },
  {
    "name": "MethodNamingConventions",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Configurable naming conventions for method declarations. This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. static method, or test method). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#methodnamingconventions"
    ]
  },
  {
    "name": "MethodNamingConventions-java",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Configurable naming conventions for method declarations. This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). Each regex can be configured through properties. By default this rule uses the standard Java naming convention (Camel case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#methodnamingconventions"
    ]
  },
  {
    "name": "MethodReturnsInternalArray",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Exposing internal arrays to the caller violates object encapsulation since elements can be removed or replaced outside of the object that owns it. It is safer to return a copy of the array.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#methodreturnsinternalarray"
    ]
  },
  {
    "name": "MethodWithSameNameAsEnclosingClass",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Non-constructor methods should not have the same name as the enclosing class.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#methodwithsamenameasenclosingclass"
    ]
  },
  {
    "name": "MethodWithSameNameAsEnclosingClass-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "A method should not have the same name as its containing class. This would be confusing as it would look like a constructor.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#methodwithsamenameasenclosingclass"
    ]
  },
  {
    "name": "MisplacedNullCheck",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The null check here is misplaced. If the variable is null a `NullPointerException` will be thrown. Either the check is useless (the variable will never be `null`) or it is incorrect.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#misplacednullcheck"
    ]
  },
  {
    "name": "MissingEncoding",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "xmlLanguage"
    ],
    "description": "When the character encoding is missing from the XML declaration, the parser may produce garbled text. This is completely dependent on how the parser is set up and the content of the XML file, so it may be hard to reproduce. Providing an explicit encoding ensures accurate and consistent parsing.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_xml_bestpractices.html#missingencoding"
    ]
  },
  {
    "name": "MissingOverride",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Annotating overridden methods with @Override ensures at compile time that the method really overrides one, which helps refactoring and clarifies intent.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#missingoverride"
    ]
  },
  {
    "name": "MissingSerialVersionUID",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Serializable classes should provide a serialVersionUID field. The serialVersionUID field is also needed for abstract base classes. Each individual class in the inheritance chain needs an own serialVersionUID field. See also Should an abstract class have a serialVersionUID.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#missingserialversionuid"
    ]
  },
  {
    "name": "MissingStaticMethodInNonInstantiatableClass",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "A class that has private constructors and does not have any static methods or fields cannot be used. When one of the private constructors is annotated with one of the annotations, then the class is not considered non-instantiatable anymore and no violation will be reported. See the property `annotations`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#missingstaticmethodinnoninstantiatableclass"
    ]
  },
  {
    "name": "MistypedCDATASection",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "xmlLanguage"
    ],
    "description": "An XML CDATA section begins with a <![CDATA[ marker, which has only one [, and ends with a ]]> marker, which has two ].",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_xml_errorprone.html#mistypedcdatasection"
    ]
  },
  {
    "name": "MoreThanOneLogger",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Normally only one logger is used in each class. This rule supports slf4j, log4j, Java Util Logging and log4j2 (since 6.19.0).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#morethanonelogger"
    ]
  },
  {
    "name": "MutableStaticState",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Non-private static fields should be made constants (or immutable references) by declaring them final. Non-private non-final static fields break encapsulation and can lead to hard to find bugs, since these fields can be modified from anywhere within the program. Callers can trivially access and modify non-private non-final static fields. Neither accesses nor modifications can be guarded against,... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#mutablestaticstate",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#mutablestaticstate"
    ]
  },
  {
    "name": "NcssConstructorCount",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#ncssconstructorcount"
    ]
  },
  {
    "name": "NcssCount",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines of code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual statements. For more details on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#ncsscount"
    ]
  },
  {
    "name": "NcssMethodCount",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#ncssmethodcount"
    ]
  },
  {
    "name": "NcssTypeCount",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#ncsstypecount"
    ]
  },
  {
    "name": "NoElseReturn",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "The else block in a if-else-construct is unnecessary if the `if` block contains a return. Then the content of the else block can be put outside. See also: <http://eslint.org/docs/rules/no-else-return>",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#noelsereturn"
    ]
  },
  {
    "name": "NonCaseLabelInSwitch",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "A non-case label (e.g. a named break/continue label) was present in a switch statement or switch expression. This is legal, but confusing. It is easy to mix up the case labels and the non-case labels. Note: This rule was renamed from `NonCaseLabelInSwitchStatement` with PMD {{PMD_VERSION}}.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#noncaselabelinswitch"
    ]
  },
  {
    "name": "NonExhaustiveSwitch",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Switch statements should be exhaustive, to make their control flow easier to follow. This can be achieved by adding a `default` case, or, if the switch is on an enum type, by ensuring there is one switch branch for each enum constant. This rule doesn't consider Switch Statements, that use Pattern Matching, since for these the compiler already ensures that all cases are covered. The same is true for Switch Expressions, which are also not considered by this rule.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#nonexhaustiveswitch"
    ]
  },
  {
    "name": "NonSerializableClass",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "If a class is marked as `Serializable`, then all fields need to be serializable as well. In order to exclude a field, it can be marked as transient. Static fields are not considered. This rule reports all fields, that are not serializable. If a class implements the methods to perform manual serialization (`writeObject`, `readObject`) or uses a replacement object (`writeReplace`, `readResolv... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#nonserializableclass",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#nonserializableclass"
    ]
  },
  {
    "name": "NonStaticInitializer",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#nonstaticinitializer"
    ]
  },
  {
    "name": "NonThreadSafeSingleton",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an initialize-on-demand holder class. Refrain from using the double-checked locking pattern. The... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#nonthreadsafesingleton",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#nonthreadsafesingleton"
    ]
  },
  {
    "name": "NoPackage",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Detects when a class, interface, enum or annotation does not have a package definition.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#nopackage"
    ]
  },
  {
    "name": "NPathComplexity",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "The NPath complexity of a method is the number of acyclic execution paths through that method. While cyclomatic complexity counts the number of decision points in a method, NPath counts the number of full paths from the beginning to the end of the block of the method. That metric grows exponentially, as it multiplies the complexity of statements in the same block. For more details on the calculation... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#npathcomplexity",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#npathcomplexity"
    ]
  },
  {
    "name": "NullAssignment",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Assigning a \"null\" to a variable (outside of its declaration) is usually bad form. Sometimes, this type of assignment is an indication that the programmer doesn't completely understand what is going on in the code. NOTE: This sort of assignment may used in some cases to dereference objects and encourage garbage collection.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#nullassignment"
    ]
  },
  {
    "name": "OneDeclarationPerLine",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Apex allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#onedeclarationperline"
    ]
  },
  {
    "name": "OneDeclarationPerLine-java",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Java allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#onedeclarationperline"
    ]
  },
  {
    "name": "OnlyOneReturn",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "A method should have only one exit point, and that should be the last statement in the method.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#onlyonereturn"
    ]
  },
  {
    "name": "OperationWithHighCostInLoop",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "apexLanguage"
    ],
    "description": "This rule finds method calls inside loops that are known to be likely a performance issue. These methods should be called only once before the loop. Schema class methods like Schema.getGlobalDescribe() and Schema.describeSObjects() might be slow depending on the size of your organization. Calling these methods repeatedly inside a loop creates a potential performance issue.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_performance.html#operationwithhighcostinloop"
    ]
  },
  {
    "name": "OperationWithLimitsInLoop",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "apexLanguage"
    ],
    "description": "Database class methods, DML operations, SOQL queries, SOSL queries, Approval class methods, Email sending, async scheduling or queueing within loops can cause governor limit exceptions. Instead, try to batch up the data into a list and invoke the operation once on that list of data outside the loop.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_performance.html#operationwithlimitsinloop"
    ]
  },
  {
    "name": "OptimizableToArrayCall",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Calls to a collection's `toArray(E[])` method should specify a target array of zero size. This allows the JVM to optimize the memory allocation and copying as much as possible. Previous versions of this rule (pre PMD 6.0.0) suggested the opposite, but current JVM implementations perform always better, when they have full control over the target array. And allocation an array via... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#optimizabletoarraycall",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#optimizabletoarraycall"
    ]
  },
  {
    "name": "OverrideBothEqualsAndHashcode",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Override both `public Boolean equals(Object obj)`, and `public Integer hashCode()`, or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass. This is especially important when Using Custom Types in Map Keys and Sets.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#overridebothequalsandhashcode"
    ]
  },
  {
    "name": "OverrideBothEqualsAndHashcode-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#overridebothequalsandhashcode"
    ]
  },
  {
    "name": "PackageCase",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Detects when a package definition contains uppercase characters.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#packagecase"
    ]
  },
  {
    "name": "PrematureDeclaration",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Checks for variables that are defined before they might be used. A declaration is deemed to be premature if there are some statements that may return or throw an exception between the time the variable is declared and the time it is first read. Some variables cannot be declared close to their first usage because of side-effects occurring before they're first used. We try to avoid reporting... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#prematuredeclaration",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#prematuredeclaration"
    ]
  },
  {
    "name": "PreserveStackTrace",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reports exceptions that are thrown from within a catch block, yet don't refer to the exception parameter declared by that catch block. The stack trace of the original exception could be lost, which makes the thrown exception less informative. To preserve the stack trace, the original exception may be used as the cause of the new exception, using `Throwable#initCause`, or passed as a... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#preservestacktrace",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#preservestacktrace"
    ]
  },
  {
    "name": "PrimitiveWrapperInstantiation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reports usages of primitive wrapper constructors. They are deprecated since Java 9 and should not be used. Even before Java 9, they can be replaced with usage of the corresponding static `valueOf` factory method (which may be automatically inserted by the compiler since Java 1.5). This has the advantage that it may reuse common instances instead of creating a new instance each... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#primitivewrapperinstantiation",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#primitivewrapperinstantiation"
    ]
  },
  {
    "name": "ProperCloneImplementation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Object clone() should be implemented with super.clone().",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#propercloneimplementation"
    ]
  },
  {
    "name": "ProperLogger",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "A logger should normally be defined private static final and be associated with the correct class. `private final Log log;` is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#properlogger"
    ]
  },
  {
    "name": "PropertyNamingConventions",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Configurable naming conventions for property declarations. This rule reports property declarations which do not match the regex that applies to their specific kind (e.g. static property, or instance property). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#propertynamingconventions"
    ]
  },
  {
    "name": "RedundantFieldInitializer",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Java will initialize fields with known default values so any explicit initialization of those same defaults is redundant and results in a larger class file (approximately three additional bytecode instructions per field).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#redundantfieldinitializer"
    ]
  },
  {
    "name": "RemoteInterfaceNamingConvention",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Remote Interface of a Session EJB should not have a suffix.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#remoteinterfacenamingconvention"
    ]
  },
  {
    "name": "RemoteSessionInterfaceNamingConvention",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "A Remote Home interface type of a Session EJB should be suffixed by 'Home'.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#remotesessioninterfacenamingconvention"
    ]
  },
  {
    "name": "ReplaceEnumerationWithIterator",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Consider replacing Enumeration usages with the newer java.util.Iterator",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#replaceenumerationwithiterator"
    ]
  },
  {
    "name": "ReplaceHashtableWithMap",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#replacehashtablewithmap"
    ]
  },
  {
    "name": "ReplaceVectorWithList",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#replacevectorwithlist"
    ]
  },
  {
    "name": "ReturnEmptyCollectionRatherThanNull",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "For any method that returns an collection (such as an array, Collection or Map), it is better to return an empty one rather than a null reference. This removes the need for null checking all results and avoids inadvertent NullPointerExceptions. See Effective Java, 3rd Edition, Item 54: Return empty collections or arrays instead of null",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#returnemptycollectionratherthannull"
    ]
  },
  {
    "name": "ReturnFromFinallyBlock",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Avoid returning from a finally block, this can discard exceptions.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#returnfromfinallyblock"
    ]
  },
  {
    "name": "ScopeForInVariable",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "ecmascriptLanguage"
    ],
    "description": "A for-in loop in which the variable name is not explicitly scoped to the enclosing scope with the 'var' keyword can refer to a variable in an enclosing scope outside the nearest enclosing scope. This will overwrite the existing value of the variable in the outer scope when the body of the for-in is evaluated. When the for-in loop has finished, the variable will contain the last value... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_bestpractices.html#scopeforinvariable",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_bestpractices.html#scopeforinvariable"
    ]
  },
  {
    "name": "ShortClassName",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Short Classnames with fewer than e.g. five characters are not recommended.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#shortclassname"
    ]
  },
  {
    "name": "ShortMethodName",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Method names that are very short are not helpful to the reader.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#shortmethodname"
    ]
  },
  {
    "name": "ShortVariable",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Fields, local variables, enum constant names or parameter names that are very short are not helpful to the reader.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#shortvariable"
    ]
  },
  {
    "name": "SignatureDeclareThrowsException",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "A method/constructor shouldn't explicitly throw the generic java.lang.Exception, since it is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand such vague interfaces. Use either a class derived from RuntimeException or a checked exception.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#signaturedeclarethrowsexception"
    ]
  },
  {
    "name": "SimpleDateFormatNeedsLocale",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate formatting is used.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#simpledateformatneedslocale"
    ]
  },
  {
    "name": "SimplifiableTestAssertion",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reports test assertions that may be simplified using a more specific assertion method. This enables better error messages, and makes the assertions more readable.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#simplifiabletestassertion"
    ]
  },
  {
    "name": "SimplifiedTernary",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Reports ternary expression with the form `condition ? literalBoolean : foo` or `condition ? foo : literalBoolean`. These expressions can be simplified as follows: * `condition ? true : expr` simplifies to `condition || expr` * `condition ? false : expr` simplifies to `!condition && expr` * `condition ? expr : true` simplifies to `!condition || expr` * `condition ? expr : false` simplifies to `condition && expr`",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#simplifiedternary"
    ]
  },
  {
    "name": "SimplifyBooleanExpressions",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#simplifybooleanexpressions"
    ]
  },
  {
    "name": "SimplifyBooleanReturns",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Avoid unnecessary if-then-else statements when returning a boolean. The result of the conditional test can be returned instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#simplifybooleanreturns"
    ]
  },
  {
    "name": "SimplifyConditional",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#simplifyconditional"
    ]
  },
  {
    "name": "SingleMethodSingleton",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#singlemethodsingleton"
    ]
  },
  {
    "name": "SingletonClassReturningNewInstance",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "A singleton class should only ever have one instance. Failure to check whether an instance has already been created may result in multiple instances being created.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#singletonclassreturningnewinstance"
    ]
  },
  {
    "name": "SingularField",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Reports fields which may be converted to a local variable. This is so because in every method where the field is used, it is assigned before it is first read. Hence, the value that the field had before the method call may not be observed, so it might as well not be stored in the enclosing object. Limitations: * We can only check private fields for now. * The rule is not aware of threading, so it may... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#singularfield",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#singularfield"
    ]
  },
  {
    "name": "StaticEJBFieldShouldBeFinal",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "According to the J2EE specification, an EJB should not have any static fields with write access. However, static read-only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#staticejbfieldshouldbefinal"
    ]
  },
  {
    "name": "StdCyclomaticComplexity",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#stdcyclomaticcomplexity"
    ]
  },
  {
    "name": "StringBufferInstantiationWithChar",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Individual character values provided as initialization arguments will be converted into integers. This can lead to internal buffer sizes that are larger than expected. Some examples: ``` new StringBuffer() // 16 new StringBuffer(6) // 6 new StringBuffer(\"hello world\") // 11 + 16 = 27 new StringBuffer('A') // chr(A) = 65 new StringBuffer(\"A\") // 1 + 16 = 17 new StringBuilder()... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#stringbufferinstantiationwithchar",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#stringbufferinstantiationwithchar"
    ]
  },
  {
    "name": "StringInstantiation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#stringinstantiation"
    ]
  },
  {
    "name": "StringToString",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Avoid calling toString() on objects already known to be string instances; this is unnecessary.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#stringtostring"
    ]
  },
  {
    "name": "SuspiciousEqualsMethodName",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The method name and parameter number are suspiciously close to `Object.equals`, which can denote an intention to override it. However, the method does not override `Object.equals`, but overloads it instead. Overloading `Object.equals` method is confusing for other programmers, error-prone and hard to maintain, especially when using inheritance, because `@Override` annotations used in... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#suspiciousequalsmethodname",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#suspiciousequalsmethodname"
    ]
  },
  {
    "name": "SuspiciousHashcodeMethodName",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "The method name and return type are suspiciously close to hashCode(), which may denote an intention to override the hashCode() method.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#suspicioushashcodemethodname"
    ]
  },
  {
    "name": "SuspiciousOctalEscape",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by: OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit Any octal escape sequence followed by non-octal digits can be confusing, e.g. \"\\038\" is interpreted as the octal escape sequence \"\\03\" followed by the literal character \"8\".",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#suspiciousoctalescape"
    ]
  },
  {
    "name": "SwitchDensity",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "A high ratio of statements to labels in a switch statement implies that the switch statement is overloaded. Consider moving the statements into new methods or creating subclasses based on the switch variable.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#switchdensity"
    ]
  },
  {
    "name": "SystemPrintln",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "References to System.(out|err).print are usually intended for debugging purposes and can remain in the codebase even in production code. By using a logger one can enable/disable this behaviour at will (and by priority) and avoid clogging the Standard out log.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#systemprintln"
    ]
  },
  {
    "name": "TestClassWithoutTestCases",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Test classes typically end with the suffix \"Test\", \"Tests\" or \"TestCase\". Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named \"testXXX\" (JUnit3) or use annotations (e.g. `@Test`). The suffix can be configured using the property `testClassPattern`. To disable the detection of possible test classes by name, set this property to an empty string.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#testclasswithouttestcases"
    ]
  },
  {
    "name": "TestMethodsMustBeInTestClasses",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "apexLanguage"
    ],
    "description": "Test methods marked as a testMethod or annotated with @IsTest, but not residing in a test class should be moved to a proper class or have the @IsTest annotation added to the class. Support for tests inside functional classes was removed in Spring-13 (API Version 27.0), making classes that violate this rule fail compile-time. This rule is mostly usable when dealing with legacy code.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_errorprone.html#testmethodsmustbeintestclasses"
    ]
  },
  {
    "name": "TooFewBranchesForSwitch",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Switch statements are intended to be used to support complex branching behaviour. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-else statements. In these cases use the if-else statement to increase code readability. Note: This rule was named TooFewBranchesForASwitchStatement before PMD {{PMD_VERSION}}.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#toofewbranchesforswitch"
    ]
  },
  {
    "name": "TooManyFields",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields, possibly through grouping related fields in new objects. For example, a class with individual city/state/zip fields could park them within a single Address field.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#toomanyfields"
    ]
  },
  {
    "name": "TooManyFields-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields, possibly through grouping related fields in new objects. For example, a class with individual city/state/zip fields could park them within a single Address field.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#toomanyfields"
    ]
  },
  {
    "name": "TooManyMethods",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#toomanymethods"
    ]
  },
  {
    "name": "TooManyStaticImports",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#toomanystaticimports"
    ]
  },
  {
    "name": "UncommentedEmptyConstructor",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Documentation",
      "javaLanguage"
    ],
    "description": "Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_documentation.html#uncommentedemptyconstructor"
    ]
  },
  {
    "name": "UncommentedEmptyMethodBody",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Documentation",
      "javaLanguage"
    ],
    "description": "Uncommented Empty Method Body finds instances where a method body does not contain statements, but there is no comment. By explicitly commenting empty method bodies it is easier to distinguish between intentional (commented) and unintentional empty methods.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_documentation.html#uncommentedemptymethodbody"
    ]
  },
  {
    "name": "UnconditionalIfStatement",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Do not use \"if\" statements whose conditionals are always true or always false.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#unconditionalifstatement"
    ]
  },
  {
    "name": "UnitTestAssertionsShouldIncludeMessage",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Unit assertions should include an informative message - i.e., use the three-argument version of `assertEquals()`, not the two-argument version. This rule supports tests using JUnit (3, 4 and 5) and TestNG. Note: This rule was named JUnitAssertionsShouldIncludeMessage before PMD {{PMD_VERSION}}.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestassertionsshouldincludemessage"
    ]
  },
  {
    "name": "UnitTestContainsTooManyAsserts",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Unit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which it is harder to verify correctness. Consider breaking the test scenario into multiple, shorter test scenarios. Customize the maximum number of assertions used by this Rule to suit your needs. This rule checks for JUnit (3, 4 and 5) and TestNG Tests. Note: This rule was named JUnitTestContainsTooManyAsserts before PMD {{PMD_VERSION}}.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestcontainstoomanyasserts"
    ]
  },
  {
    "name": "UnitTestShouldIncludeAssert",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Unit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does. This rule checks for JUnit (3, 4 and 5) and TestNG Tests. Note: This rule was named JUnitTestsShouldIncludeAssert before PMD {{PMD_VERSION}}.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestshouldincludeassert"
    ]
  },
  {
    "name": "UnitTestShouldUseAfterAnnotation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "This rule detects methods called `tearDown()` that are not properly annotated as a cleanup method. This is primarily intended to assist in upgrading from JUnit 3, where tear down methods were required to be called `tearDown()`. To a lesser extent, this may help detect omissions even under newer JUnit versions or under TestNG, as long as you are following this convention to... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestshoulduseafterannotation",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestshoulduseafterannotation"
    ]
  },
  {
    "name": "UnitTestShouldUseBeforeAnnotation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "This rule detects methods called `setUp()` that are not properly annotated as a setup method. This is primarily intended to assist in upgrading from JUnit 3, where setup methods were required to be called `setUp()`. To a lesser extent, this may help detect omissions even under newer JUnit versions or under TestNG, as long as you are following this convention to name the... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestshouldusebeforeannotation",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestshouldusebeforeannotation"
    ]
  },
  {
    "name": "UnitTestShouldUseTestAnnotation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "The rule will detect any test method starting with \"test\" that is not properly annotated, and will therefore not be run. In JUnit 4, only methods annotated with the `@Test` annotation are executed. In JUnit 5, one of the following annotations should be used for tests: `@Test`, `@RepeatedTest`, `@TestFactory`, `@TestTemplate` or `@ParameterizedTest`. In TestNG, only methods... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestshouldusetestannotation",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unittestshouldusetestannotation"
    ]
  },
  {
    "name": "UnnecessaryAnnotationValueElement",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Avoid the use of value in annotations when it's the only element.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessaryannotationvalueelement"
    ]
  },
  {
    "name": "UnnecessaryBlock",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "An unnecessary Block is present. Such Blocks are often used in other languages to introduce a new variable scope. Blocks do not behave like this in ECMAScipt, and using them can be misleading. Considering removing this unnecessary Block.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#unnecessaryblock"
    ]
  },
  {
    "name": "UnnecessaryBooleanAssertion",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing. Consider using flow control (in case of `assertTrue(false)` or similar) or simply removing statements like `assertTrue(true)` and `assertFalse(false)`. If you just want a test to halt after finding an error, use the `fail()` method and provide an indication message of why it did.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#unnecessarybooleanassertion"
    ]
  },
  {
    "name": "UnnecessaryBoxing",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Reports explicit boxing and unboxing conversions that may safely be removed, either because they would be inserted by the compiler automatically, or because they're semantically a noop (eg unboxing a value to rebox it immediately). Note that this only handles boxing and unboxing conversions occurring through calls to `valueOf` or one of the `intValue`, `byteValue`, etc. methods. Casts that command a conversion are reported by {% rule UnnecessaryCast %} instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessaryboxing"
    ]
  },
  {
    "name": "UnnecessaryCaseChange",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#unnecessarycasechange"
    ]
  },
  {
    "name": "UnnecessaryCast",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Detects casts which could be removed as the operand of the cast is already suitable for the context type. For instance, in the following: ``` Object context = (Comparable) \"o\"; ``` The cast is unnecessary. This is because `String` already is a subtype of both `Comparable` and `Object`. This will also flag casts that can be avoided because of the autoboxing feature of Java 5. ``` Integer integer = (Integer) 1; ``` The literal would be autoboxed to `Integer` anyway.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessarycast"
    ]
  },
  {
    "name": "UnnecessaryConstructor",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "This rule detects when a constructor is not necessary; i.e., when there is only one constructor and the constructor is identical to the default constructor. The default constructor should has same access modifier as the declaring class. In an enum type, the default constructor is implicitly private.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessaryconstructor"
    ]
  },
  {
    "name": "UnnecessaryConversionTemporary",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods on the wrapper classes instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#unnecessaryconversiontemporary"
    ]
  },
  {
    "name": "UnnecessaryFullyQualifiedName",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Import statements allow the use of non-fully qualified names. The use of a fully qualified name which is covered by an import statement is redundant. Consider using the non-fully qualified name.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname"
    ]
  },
  {
    "name": "UnnecessaryImport",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they're in java.lang, or the current package. If some imports cannot be resolved, for instance because you run PMD with an incomplete auxiliary classpath, some imports may be conservatively marked as used even if they're not to avoid false positives.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessaryimport"
    ]
  },
  {
    "name": "UnnecessaryLocalBeforeReturn",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Avoid the creation of unnecessary local variables",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn"
    ]
  },
  {
    "name": "UnnecessaryModifier",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Fields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`. Classes, interfaces or annotations nested in an interface or annotation are automatically `public static` (all nested interfaces and annotations are automatically static). Nested enums are automatically `static`. For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessarymodifier"
    ]
  },
  {
    "name": "UnnecessaryParentheses",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "Unnecessary parentheses should be removed.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#unnecessaryparentheses"
    ]
  },
  {
    "name": "UnnecessaryReturn",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Avoid the use of unnecessary return statements. A return is unnecessary when no instructions follow anyway.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessaryreturn"
    ]
  },
  {
    "name": "UnnecessarySemicolon",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Reports unnecessary semicolons (so called \"empty statements\" and \"empty declarations\"). These can be removed without changing the program. The Java grammar allows them for historical reasons, but they should be avoided. This rule will not report empty statements that are syntactically required, for instance, because they are the body of a control statement. This rule replaces EmptyStatementNotInLoop.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#unnecessarysemicolon"
    ]
  },
  {
    "name": "UnnecessaryTypeAttribute",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "htmlLanguage"
    ],
    "description": "In HTML5 the explicit type attribute for link and script elements is not needed. Modern browsers expect stylesheets to be in CSS and scripts to use JavaScript.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_html_bestpractices.html#unnecessarytypeattribute"
    ]
  },
  {
    "name": "UnnecessaryVarargsArrayCreation",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reports explicit array creation when a varargs is expected. For instance: ```java Arrays.asList(new String[] { \"foo\", \"bar\", }); ``` can be replaced by: ```java Arrays.asList(\"foo\", \"bar\"); ```",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unnecessaryvarargsarraycreation"
    ]
  },
  {
    "name": "UnreachableCode",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "A 'return', 'break', 'continue', or 'throw' statement should be the last in a block. Statements after these will never execute. This is a bug, or extremely poor style.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#unreachablecode"
    ]
  },
  {
    "name": "UnsynchronizedStaticFormatter",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Instances of `java.text.Format` are generally not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized on block level.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#unsynchronizedstaticformatter"
    ]
  },
  {
    "name": "UnusedAssignment",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reports assignments to variables that are never used before the variable is overwritten, or goes out of scope. Unused assignments are those for which 1. The variable is never read after the assignment, or 2. The assigned value is always overwritten by other assignments before the next read of the variable. The rule tracks assignements to fields of `this`, and static fields of the current... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unusedassignment",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unusedassignment"
    ]
  },
  {
    "name": "UnusedFormalParameter",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Reports parameters of methods and constructors that are not referenced them in the method body. Parameters whose name starts with `ignored` or `unused` are filtered out. Removing unused formal parameters from public methods could cause a ripple effect through the code base. Hence, by default, this rule only considers private methods. To include non-private methods, set the `checkAll` property to `true`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unusedformalparameter"
    ]
  },
  {
    "name": "UnusedLocalVariable",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "apexLanguage"
    ],
    "description": "Detects when a local variable is declared and/or assigned but not used.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_bestpractices.html#unusedlocalvariable"
    ]
  },
  {
    "name": "UnusedLocalVariable-java",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Detects when a local variable is declared and/or assigned, but not used. Variables whose name starts with `ignored` or `unused` are filtered out.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unusedlocalvariable"
    ]
  },
  {
    "name": "UnusedMethod",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "apexLanguage"
    ],
    "description": "Avoid having unused methods since they make understanding and maintaining code harder. This rule finds not only unused private methods, but public methods as well. ApexLink is used to make this possible and this needs additional configuration. The environment variable `PMD_APEX_ROOT_DIRECTORY` needs to be set prior to executing PMD. With this variable the root directory of the Salesforce metadata,... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#unusedmethod",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_design.html#unusedmethod"
    ]
  },
  {
    "name": "UnusedNullCheckInEquals",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#unusednullcheckinequals"
    ]
  },
  {
    "name": "UnusedPrivateField",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Detects when a private field is declared and/or assigned a value, but not used. Since PMD 6.50.0 private fields are ignored, if the fields are annotated with any annotation or the enclosing class has any annotation. Annotations often enable a framework (such as dependency injection, mocking or e.g. Lombok) which use the fields by reflection or other means. This usage can't be detected by... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unusedprivatefield",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unusedprivatefield"
    ]
  },
  {
    "name": "UnusedPrivateMethod",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Unused Private Method detects when a private method is declared but is unused.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#unusedprivatemethod"
    ]
  },
  {
    "name": "UseAltAttributeForImages",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "htmlLanguage"
    ],
    "description": "Always use an \"alt\" attribute for images. This provides an alternative text and is extensively used by screen readers.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_html_bestpractices.html#usealtattributeforimages"
    ]
  },
  {
    "name": "UseArrayListInsteadOfVector",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#usearraylistinsteadofvector"
    ]
  },
  {
    "name": "UseArraysAsList",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "The `java.util.Arrays` class has a `asList()` method that should be used when you want to create a new List from an array of objects. It is faster than executing a loop to copy all the elements of the array one by one. Note that the result of `Arrays.asList()` is backed by the specified array, changes in the returned list will result in the array to be modified. For that reason, it is not... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#usearraysaslist",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#usearraysaslist"
    ]
  },
  {
    "name": "UseBaseWithParseInt",
    "severityLevel": 2,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "ecmascriptLanguage"
    ],
    "description": "This rule checks for usages of parseInt. While the second parameter is optional and usually defaults to 10 (base/radix is 10 for a decimal number), different implementations may behave differently. It also improves readability, if the base is given. See also: parseInt()",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_bestpractices.html#usebasewithparseint"
    ]
  },
  {
    "name": "UseCollectionIsEmpty",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements. Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#usecollectionisempty"
    ]
  },
  {
    "name": "UseConcurrentHashMap",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Since Java5 brought a new implementation of the Map designed for multi-threaded access, you can perform efficient map reads without blocking other threads.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#useconcurrenthashmap"
    ]
  },
  {
    "name": "UseCorrectExceptionLogging",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable. This rule only applies to Apache Commons Logging.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#usecorrectexceptionlogging"
    ]
  },
  {
    "name": "UseDiamondOperator",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "In some cases, explicit type arguments in a constructor call for a generic type may be replaced by diamond type arguments (`<>`), and be inferred by the compiler. This rule recommends that you use diamond type arguments anywhere possible, since it avoids duplication of the type arguments, and makes the code more concise and readable. This rule is useful when upgrading a codebase to Java 1.7,... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#usediamondoperator",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#usediamondoperator"
    ]
  },
  {
    "name": "UseEnumCollections",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Wherever possible, use `EnumSet` or `EnumMap` instead of `HashSet` and `HashMap` when the keys are of an enum type. The specialized enum collections are more space- and time-efficient. This rule reports constructor expressions for hash sets or maps whose key type is an enum type.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#useenumcollections"
    ]
  },
  {
    "name": "UseEqualsToCompareStrings",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "Using '==' or '!=' to compare strings is only reliable if the interned string (`String#intern()`) is used on both sides. Use the `equals()` method instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#useequalstocomparestrings"
    ]
  },
  {
    "name": "UseExplicitTypes",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Java 10 introduced the `var` keyword. This reduces the amount of code written because java can infer the type from the initializer of the variable declaration. This is essentially a trade-off: On the one hand, it can make code more readable by eliminating redundant information. On the other hand, it can make code less readable by eliding useful information. There is no blanket rule for when... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#useexplicittypes",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#useexplicittypes"
    ]
  },
  {
    "name": "UseIndexOfChar",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Use String.indexOf(char) when checking for the index of a single character; it executes faster.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#useindexofchar"
    ]
  },
  {
    "name": "UseIOStreamsWithApacheCommonsFileItem",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Problem: Use of FileItem.get() and FileItem.getString() could exhaust memory since they load the entire file into memory. Solution: Use FileItem.getInputStream() and buffering.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#useiostreamswithapachecommonsfileitem"
    ]
  },
  {
    "name": "UselessOperationOnImmutable",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "An operation on an immutable object will not change the object itself since the result of the operation is a new object. Therefore, ignoring the result of such an operation is likely a mistake. The operation can probably be removed. This rule recognizes the types `String`, `BigDecimal`, `BigInteger` or any type from `java.time.*` as immutable.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#uselessoperationonimmutable"
    ]
  },
  {
    "name": "UselessOverridingMethod",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "The overriding method merely calls the same method defined in a superclass.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#uselessoverridingmethod"
    ]
  },
  {
    "name": "UselessParentheses",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Parenthesized expressions are used to override the default operator precedence rules. Parentheses whose removal would not change the relative nesting of operators are unnecessary, because they don't change the semantics of the enclosing expression. Some parentheses that strictly speaking are unnecessary, may still be considered useful for readability. This rule allows to ignore violations on... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#uselessparentheses",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#uselessparentheses"
    ]
  },
  {
    "name": "UselessQualifiedThis",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Reports qualified this usages in the same class.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#uselessqualifiedthis"
    ]
  },
  {
    "name": "UselessStringValueOf",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "No need to call String.valueOf to append to a string; just use the valueOf() argument directly.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#uselessstringvalueof"
    ]
  },
  {
    "name": "UseLocaleWithCaseConversions",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "When doing `String::toLowerCase()/toUpperCase()` conversions, use an explicit locale argument to specify the case transformation rules. Using `String::toLowerCase()` without arguments implicitly uses `Locale::getDefault()`. The problem is that the default locale depends on the current JVM setup (and usually on the system in which it is running). Using the system default may be... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#uselocalewithcaseconversions",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#uselocalewithcaseconversions"
    ]
  },
  {
    "name": "UseNotifyAllInsteadOfNotify",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Multithreading",
      "javaLanguage"
    ],
    "description": "Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_multithreading.html#usenotifyallinsteadofnotify"
    ]
  },
  {
    "name": "UseObjectForClearerAPI",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class will use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information as a simple series of Strings, you may think of using an Object to represent all those information. You'll get a simpler API (such as doWork(Workload... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#useobjectforclearerapi",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#useobjectforclearerapi"
    ]
  },
  {
    "name": "UseProperClassLoader",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "ErrorProne",
      "javaLanguage"
    ],
    "description": "In J2EE, the getClassLoader() method might not work as expected. Use Thread.currentThread().getContextClassLoader() instead.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_errorprone.html#useproperclassloader"
    ]
  },
  {
    "name": "UseShortArrayInitializer",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "When declaring and initializing array fields or variables, it is not necessary to explicitly create a new array using `new`. Instead one can simply define the initial content of the array as a expression in curly braces. E.g. `int[] x = new int[] { 1, 2, 3 };` can be written as `int[] x = { 1, 2, 3 };`.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#useshortarrayinitializer"
    ]
  },
  {
    "name": "UseStandardCharsets",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Starting with Java 7, StandardCharsets provides constants for common Charset objects, such as UTF-8. Using the constants is less error prone, and can provide a small performance advantage compared to `Charset.forName(...)` since no scan across the internal `Charset` caches is needed.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#usestandardcharsets"
    ]
  },
  {
    "name": "UseStringBufferForStringAppends",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "The use of the '+=' operator for appending strings causes the JVM to create and use an internal StringBuffer. If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#usestringbufferforstringappends"
    ]
  },
  {
    "name": "UseStringBufferLength",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Performance",
      "javaLanguage"
    ],
    "description": "Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals(\"\") or StringBuffer.toString().length() == ...",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_performance.html#usestringbufferlength"
    ]
  },
  {
    "name": "UseTryWithResources",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Java 7 introduced the try-with-resources statement. This statement ensures that each resource is closed at the end of the statement. It avoids the need of explicitly closing the resources in a finally block. Additionally exceptions are better handled: If an exception occurred both in the `try` block and `finally` block, then the exception from the try block was suppressed. With the `try`-with-resources statement, the exception thrown from the try-block is preserved.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#usetrywithresources"
    ]
  },
  {
    "name": "UseUnderscoresInNumericLiterals",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "javaLanguage"
    ],
    "description": "Since Java 1.7, numeric literals can use underscores to separate digits. This rule enforces that numeric literals above a certain length use these underscores to increase readability. The rule only supports decimal (base 10) literals for now. The acceptable length under which literals are not required to have underscores is configurable via a property. Even under that length, underscores that are misplaced (not making groups of 3 digits) are reported.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals"
    ]
  },
  {
    "name": "UseUtilityClass",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Design",
      "javaLanguage"
    ],
    "description": "For classes that only have static methods, consider making them utility classes. Note that this doesn't apply to abstract classes, since their subclasses may well include non-static methods. Also, if you want this class to be a utility class, remember to add a private constructor to prevent instantiation. (Note, that this use was known before PMD 5.1.0 as UseSingleton).",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_design.html#useutilityclass"
    ]
  },
  {
    "name": "UseVarargs",
    "severityLevel": 4,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array. Byte arrays in any method and String arrays in `public static void main(String[])` methods are ignored.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#usevarargs"
    ]
  },
  {
    "name": "VfCsrf",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "visualforceLanguage"
    ],
    "description": "Avoid calling VF action upon page load as the action becomes vulnerable to CSRF.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_visualforce_security.html#vfcsrf"
    ]
  },
  {
    "name": "VfHtmlStyleTagXss",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "visualforceLanguage"
    ],
    "description": "Checks for the correct encoding in `<style/>` tags in Visualforce pages. The rule is based on Salesforce Security's recommendation to prevent XSS in Visualforce as mentioned on Secure Coding Cross Site Scripting. In order to avoid cross site scripting, the relevant encoding must be used in HTML tags. The rule expects `URLENCODING` or `JSINHTMLENCODING` for URL-based style values and any... Learn more: https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_visualforce_security.html#vfhtmlstyletagxss",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_visualforce_security.html#vfhtmlstyletagxss"
    ]
  },
  {
    "name": "VfUnescapeEl",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "Security",
      "visualforceLanguage"
    ],
    "description": "Avoid unescaped user controlled content in EL as it results in XSS.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_visualforce_security.html#vfunescapeel"
    ]
  },
  {
    "name": "WhileLoopsMustUseBraces",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "apexLanguage"
    ],
    "description": "Avoid using 'while' statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_apex_codestyle.html#whileloopsmustusebraces"
    ]
  },
  {
    "name": "WhileLoopsMustUseBraces-ecmascript",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "CodeStyle",
      "ecmascriptLanguage"
    ],
    "description": "Avoid using 'while' statements without using curly braces.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_ecmascript_codestyle.html#whileloopsmustusebraces"
    ]
  },
  {
    "name": "WhileLoopWithLiteralBoolean",
    "severityLevel": 3,
    "type": "Standard",
    "tags": [
      "Recommended",
      "BestPractices",
      "javaLanguage"
    ],
    "description": "`do {} while (true);` requires reading the end of the statement before it is apparent that it loops forever, whereas `while (true) {}` is easier to understand. `do {} while (false);` is redundant, and if an inner variable scope is required, a block `{}` is sufficient. `while (false) {}` will never execute the block and can be removed in its entirety.",
    "resourceUrls": [
      "https://docs.pmd-code.org/pmd-doc-{{PMD_VERSION}}/pmd_rules_java_bestpractices.html#whileloopwithliteralboolean"
    ]
  }
]
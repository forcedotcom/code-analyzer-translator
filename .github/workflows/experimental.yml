name: run experiment
on:
  workflow_call:
    inputs:
      code-analyzer-core:
        description: Fake input for Core
        type: boolean
        required: false
        default: false
      code-analyzer-engine-api:
        description: Fake input for API
        type: boolean
        required: false
        default: false
      code-analyzer-eslint-engine:
        description: Fake input for ESLint
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash

jobs:
  run-experiment:
    runs-on: macos-latest
    outputs:
      packages-to-release: ${{ steps.experiment-with-inputs.outputs.packages_to_release }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: experiment with inputs
        id: experiment-with-inputs
        run: |
          PACKAGES_TO_CHECK_ARR=()
          if [ "${{ inputs.code-analyzer-core }}" == "true" ]; then
            echo "Adding core"
            PACKAGES_TO_CHECK_ARR+=('code-analyzer-core')
          fi
          if [ "${{ inputs.code-analyzer-engine-api }}" == "true" ]; then
            echo "Adding API"
            PACKAGES_TO_CHECK_ARR+=('code-analyzer-engine-api')
          fi
          if [ "${{ inputs.code-analyzer-eslint-engine }}" == "true" ]; then
            echo "Adding ESLint"
            PACKAGES_TO_CHECK_ARR+=('code-analyzer-eslint-engine')
          fi
          for name in "${PACKAGES_TO_CHECK_ARR[@]}"
          do
            echo "we have name ${name}"
          done
          PACKAGES_TO_CHECK_STR=$(IFS=' '; echo "${PACKAGES_TO_CHECK_ARR[*]}")
          echo ${PACKAGES_TO_CHECK_STR}
          echo "packages_to_release=${PACKAGES_TO_CHECK_STR}" >> "$GITHUB_OUTPUT"
  run-second-experiment:
    runs-on: macos-latest
    needs: run-experiment
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: experiment with loops
        id: experiment-with-loops
        run: |
          PACKAGE_NAMES=(${{ needs.run-experiment.outputs.packages-to-release }})
          for name in "${PACKAGE_NAMES[@]}"
          do
            echo "package name is ${name}"
            cd ./packages/${name}
            jq -r ".version" package.json
            cd ../..
          done
